name:            java-adt
version:         0.2016.11.28
build-type:      Simple
cabal-version:   >= 1.22
license:         OtherLicense
license-file:    LICENSE
author:          Andreas Abel
maintainer:      Andreas Abel <andreas.abel@ifi.lmu.de>
homepage:        http://github.com/andreasabel/java-adt
bug-reports:     http://github.com/andreasabel/java-adt/issues
category:        Java
synopsis:        Create immutable algebraic data structures for Java.
description:
  A simple tool to create immutable algebraic data structures and visitors for Java
  (such as abstract syntax trees).  The input syntax is similar to Haskell data types,
  and they will be compiled to Java class hierarchies.
  .
  Example 1: Immutable linked lists with default visitor.
  .
  Input: List.hs
  .
  data List A = Nil | Cons { head :: A, tail :: List A }
  .
  Invokation: java-adt List.hs
  .
  Output on standard out:
  .
  abstract class List<A> {
  }
  .
  class Nil<A> extends List<A> {
  &x#20;   public Nil () {
  &x#20;   }
  }
  .
  class Cons<A> extends List<A> {
  &x#20;   public A head;
  &x#20;   public List<A> tail;
  &x#20;   public Cons (A head, List<A> tail) {
  &x#20;       this.head = head;
  &x#20;       this.tail = tail;
  &x#20;   }
  }
  .
  Invokation: java-adt -o List.java List.hs
  .
  Leaves output in List.java.
  .
  Invokation: java-adt -d List.hs
  .
  Outputs same but with default visitor on standard out:
  .
  abstract class List<A> {
  &x#20;   public abstract <R> R accept (ListVisitor<R,A> v);
  }
  .
  class Nil<A> extends List<A> {
  &x#20;   public Nil () {
  &x#20;   }
  &x#20;   public <R> R accept (ListVisitor<R,A> v) {
  &x#20;       return v.visit (this);
  &x#20;   }
  }
  .
  class Cons<A> extends List<A> {
  &x#20;   public A head;
  &x#20;   public List<A> tail;
  &x#20;   public Cons (A head, List<A> tail) {
  &x#20;       this.head = head;
  &x#20;       this.tail = tail;
  &x#20;   }
  &x#20;   public <R> R accept (ListVisitor<R,A> v) {
  &x#20;       return v.visit (this);
  &x#20;   }
  }
  .
  interface ListVisitor<R,A> {
  &x#20;   public R visit (Nil<A> l);
  &x#20;   public R visit (Cons<A> l);
  }
  .
  Example 2: A simple AST with custom visitor.
  .
  Input file CMM.hs:
  .
  data Exp
  &x#20; = EInt { i :: Integer }
  &x#20; | EAdd { e1 :: Exp, e2 :: Exp }
  &x#20; | ESub { e1 :: Exp, e2 :: Exp }
  --visitor Integer EvalVisitor
  .
  Invokation: java-ast -o Exp.java Exp.hs
  .
  Output in Exp.java:
  .
  abstract class Exp {
  &x#20;   public abstract Integer accept (EvalVisitor v);
  }
  .
  class EInt extends Exp {
  &x#20;   public Integer i;
  &x#20;   public EInt (Integer i) {
  &x#20;       this.i = i;
  &x#20;   }
  &x#20;   public Integer accept (EvalVisitor v) {
  &x#20;       return v.visit (this);
  &x#20;   }
  }
  .
  class EAdd extends Exp {
  &x#20;   public Exp e1;
  &x#20;   public Exp e2;
  &x#20;   public EAdd (Exp e1, Exp e2) {
  &x#20;       this.e1 = e1;
  &x#20;       this.e2 = e2;
  &x#20;   }
  &x#20;   public Integer accept (EvalVisitor v) {
  &x#20;       return v.visit (this);
  &x#20;   }
  }
  .
  class ESub extends Exp {
  &x#20;   public Exp e1;
  &x#20;   public Exp e2;
  &x#20;   public ESub (Exp e1, Exp e2) {
  &x#20;       this.e1 = e1;
  &x#20;       this.e2 = e2;
  &x#20;   }
  &x#20;   public Integer accept (EvalVisitor v) {
  &x#20;       return v.visit (this);
  &x#20;   }
  }
  .
  interface EvalVisitor {
  &x#20;   public Integer visit (EInt e);
  &x#20;   public Integer visit (EAdd e);
  &x#20;   public Integer visit (ESub e);
  }

tested-with:        GHC == 7.8.4

data-files:         test/Makefile
                    test/*.hs
                    README.md

source-repository head
  type:     git
  location: http://github.com/andreasabel/java-adt.git

executable java-adt
  hs-source-dirs:   src
  build-depends:    base >= 4.2 && < 5.0,
                    array,
                    pretty
  build-tools:      happy >= 1.15,
                    alex >= 3.0
  default-language: Haskell2010
  main-is:          Main.hs
  other-modules:    Lexer
                    Options
                    Parser
                    Printer
                    Syntax
